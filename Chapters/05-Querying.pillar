!! Moose Query

Moose-Query is a domain-specific language (DSL) to build navigations and scoped queries for entities in Moose. Its authors are Anne Etien and Jean-Christophe Bach, joined later by Vincent Blondeau and Cyril Ferlicot-Delbecque. It is the successor of Moose-Chef. It is designed to simplify and standardize the way to query Moose models.

This chapter presents MooseQuery from three perspectives: user, developer (extender of Moose-Query) and API.

!!! User perspective

+A simple model.>file://figures/simpleModelWithAssociations.pdf|width=100|label=query-mse-graph+

An application model in Moose is composed of two concepts as shown in Figure *@query-mse-graph*:

- ""Nesting of entities."" Defines which entity contains which entities. For example, it defines that classes are contained in a package and that methods are contained in a class. In Figure *@query-mse-graph*, relations ''parentPackage'', ''container'', and ''parentType'' express such a concept. This concept allows one to represent the containment tree of a model.

- ""Associations between entities."" Specify how the entities interact with each other. For example, an inheritance is an association between a subclass and its superclass. Another example is that a reference is an association between a behavioural entity and a type. In Figure *@query-mse-graph*, the object '':Inheritance'' with the ''superclass'' and ''subclass'' relations represents such concept.

MooseQuery allows exploring a model via those two concepts. You can:
- Explore the containment tree,
- Gather associations,
- Manipulate the gathered associations, and
- Change the scope of entities (move from classes to their parent package or their children methods).

In this chapter, we detail the use of the DSL. At the end, you will be able to query your Moose model, for example, to:

- Get the children of an entity (Exploration of the containment tree),
- Get all the associations contained in a class (Gathering of associations),
- Get all the entities who depend on a specific entity (Manipulation of the gathered associations), and 
- Get all the methods contained in a package in a Java model, including those in inner/anonymous classes (Change of scope).

!!! Containment tree query API 

Navigate the containment tree is the easiest way to query a model. It is possible with the association relations. To do so, there is a really simple API on entities:

| ""Selector"" | ""Description""|
| ==children== | Returns the direct children of the entity |
| ==parents== | Returns the direct parents of the entity |
| ==allChildren== | Returns the children of the entity and their children recursively |
| ==allParents== | Returns the parents of the entity and their parents recursively |

+A simple containment model.>file://figures/modelWithcontainment.pdf|width=65|label=query2+


!!! Containment query examples
For example using the model shown in Figure *@query2* we can express the following queries with their results

[[[
package1 children
>>> { package2 . class1 }
]]]

[[[
class3 children
>>> { attribute1 . attribute2 }
]]]

[[[
package1 allChildren
>>> { package2 . class1 . class2 . class3 . attribut1 . attribut2 }
]]]

[[[
class3 allChildren
>>>{ attribut1 . attribut2 }
]]]

[[[
package1 parents
>>> { }
]]]

[[[
class3 parents
>>> { package2 }
]]]

[[[
class3 allParents
>>> { package2 . package1 }
]]]
[[[
attribute1 allParents
>>>{ class3 . package2 . package1 }
]]]


!!! Navigation queries

To navigate links between entities, MooseQuery provides a generic API to gather entities' associations. Those associations represent a different kind of links such as ''References'', ''Inheritance'', ''Accesses'', or ''Invocations''.

These queries are configured with three parameters:
- The direction of the association (incoming or outgoing). An incoming association represents a relation where the studied entity (receiver of the query) is the target of the relation. An outgoing association represents a relation where the studied entity is the source of the relation.
- The association(s) that is queried.
- In addition, a query can be either local or not (by not we mean that it considers the containment tree to compute the result). A local query searches only in the associations of the receiver while a non-local query also ''takes into account the entity children's associations''.


!!! Navigation query API 

The main methods to perform navigation queries are:


- ==query: direction with: associationClass == This method takes as first parameter a symbol (==#out== or ==#in==) to define the direction of the query and as second parameter an association class to query. ''Return:'' All the instances of this association class where the receiver or its children are the source/target depending on the direction.|
- ==queryAll: direction==  This method takes as parameter a symbol (==#out== or ==#in==) to define the direction of the query. It takes into account all kind of associations. ''Return:'' All the association's instances where the receiver or its children are the source/target depending on the direction.
- ==queryLocal:direction with: associationClass==  This method is equivalent to ==query:with:== but takes into account only the studied entity without its children. It takes as first parameter a symbol (==#out== or ==#in==) to define the direction of the query and as second parameter an association class to query. ''Return:'' All the instances of this association class where the receiver only is the source/target depending on the symbol.
- ==queryAllLocal: direction== This method is equivalent to ==queryAll:== but takes into account only the studied entity without its children. It takes as parameter a symbol (==#out== or ==#in==) to define the direction of the query. It takes into account all kind of associations. ''Return:'' All the association's instances where the receiver only is the source/target depending on the symbol.

Technical note: All the associations accept ==source== and ==target== which are redefined depending on the context of the association meaning. For Inheritance ==target== is equivalent to ==superclass== and ==source==  is equivalent to ==subclass== as shown in Figure *@query3*.


+Example of a small model with associations.>file://figures/modelWithAssociations.pdf|width=75|label=query3+

!!! Navigation query examples
Using the model shown in Figure *@query3* we can express the following queries with their results.


!!!! Query one: incoming inheritance

[[[
class1 queryLocal: #in with: FAMIXInheritance. 
>>> { inheritance1 }
]]]
Explanation: We get the ==inheritance1== object whose target is ==class1==. 
[[[
class1 query: #in with: FAMIXInheritance. 
>>> { inheritance1 }
]]]
Explanation: There is no difference between local and containment  since ==class1== does not contain any other target of inheritance relationships.

!!!! Query two: outgoing inheritance
[[[
class1 query: #out with: FAMIXInheritance. 
>>> { }
]]]
Explanation: Since ==class1== is not the source of any inheritance relation, the query result is empty. 

!!!! Query three: local outgoing access
[[[
class1 queryLocal: #out with: FAMIXAccess. 
>>> { }. 
]]]
Explanation: Empty result since  ==class1== is not directly the source of any access (and in particular ==access1==).


!!!! Query four: global outgoing access
Now a more subtle point showing the interplay between containment and navigation conceptual graphs.

[[[
class1 query: #out with: FAMIXAccess. 
>>> { access1 }. 
]]]

Explanation: 
This query returns ==access1== because even if the class does not explicitly refers to ==attribute1== via a direct access, one of its children (here ==method1==) is actually accessing ==attribute1== hence the query returns ==access1==. 
It considers conceptually that the variable (target) link is an outlink of class1.

Note that on Figure *@query3*, MooseQuery does not look at the arrow direction but takes into account the source of the relationship. Here ==method1== is the source of ==access1==, therefore ==class1== is considered as having an out relationship 
with ==attribute1== via ==access1==.



!!!! Query five: local all incoming relationships

[[[
class1 queryAllLocal: #in. 
>>> { reference1 . inheritance1}
]]]
Explanation: ==queryAll*== considers all types of relationships without distinction. ==class1== is the target of two relationships: ==reference1== and ==inheritance1==


!!!! Query six: all incoming relationships

[[[
class1 queryAll: #in. 
>>> { inheritance1 . reference1 }
]]]

Explanation: Here we consider all the contained objects in the containment tree of ==class1==. It means that ==method1==
will be considered too when checking the target. Now in this query ==method1== is not the target of any relationship and in particular ==access1==. 


!!!! Query seven: all incoming relationships

[[[
class1 queryAllLocal: #out. 
>>> { }
]]]

Explanation: In a local set up, ==class1== does not act as a source of any kind so the query result is empty.


[[[
class1 queryAll: #out. 
>>> { access1 }
]]]
Explanation: When taking into account the children of ==class1==, we get ==method1== and it is the source
of a navigation relationship here ==access1==. 



!!!! Step back

What is important to see with the examples above is that only the navigation relationships are taken into account during the filtering based on association types. The containment hierarchy is not reported but used when the children of an entity are taken into account to check source and target of a relationship.

Note that in the example we only use one level of containment (==class1== contains ==method1==) but MooseQuery queries the containment relationship recursively (following allChildren semantics) and as such a package containing ==class1== contains also ==method1==.

!!! Types of association
Now we can ask ourselves how to know which entity can be the source or target of which type of association. For this, it exists an API based on the meta-model of your application. These methods have to be sent to an entity class e.g. ==FAMIXClass incomingAssociationTypes==. 

|""Selector""|Description|
| ==aCl outgoingAssociationTypes==|Return all the possible outgoing association types for this entity. This does not include the outgoing association types of its possible children.
| ==aCl incomingAssociationTypes==|Return all the possible incoming association types for this entity. This does not include the incoming association types of its possible children.
| ==aCl allOutgoingAssociationTypes==|Return all the possible outgoing association types for this entity, including the outgoing association types of its possible children.
| ==aCl allIncomingAssociationTypes==|Return all the possible incoming association types for this entity, including the incoming association types of its possible children.


!!!! Association type query examples

[[[
FAMIXType outgoingAssociationTypes. 
>>> { FAMIXInheritance }
]]]

[[[
FAMIXType incomingAssociationTypes. 
>>> { FAMIXInheritance . FAMIXTraitUsage . FAMIXReference }
]]]

[[[
FAMIXType allOutgoingAssociationTypes. 
>>> { FAMIXAccess . FAMIXInheritance . FAMIXInvocation . FAMIXReference }
]]]

[[[
FAMIXType allIncomingAssociationTypes. 
>>> { FAMIXAccess . FAMIXInheritance . FAMIXInvocation . FAMIXReference . FAMIXTraitUsage }
]]]

!!! Query result handling

A navigation query returns a result as an instance of ==MooseQueryResult==. There are three types of query results:

- MooseIncomingQueryResult manages the result of a query on incoming associations.
- MooseOutgoingQueryResult manages the result of a query on outgoing associations.
- MooseObjectQueryResult is special kind of query result that can be obtained via the two others ones and includes the opposites of the receiver associations. (For example if you query the outgoing accesses of a class, the opposites of the class associations will be the accessed attributes)

These query results classes are special collections with some new features.

One of the most useful ones is the ==opposites== message that can be sent to MooseIncomingQueryResult and MooseOutgoingQueryResult. It returns a MooseObjectQueryResult containing all the opposites entities of the query result compared to the receiver of the query.

!!!! Example 
[[[
class1 queryAll: #in. 
>>> { inheritance1 . reference1 }
]]]

[[[
(class1 queryAll: #in) opposites. 
>>> { class2 . method2 }
]]]

Indeed, when we query a model, it is often not the associations that we want as result but the source/target entities of these associations. For example, if we want the instance variables accessed by a given method, ==query:with:== will returns the accesses whereas sending the message ==opposites== on the result returns the variables themselves.

Another possibility is to exclude all the results where the opposite is included in the receiver of the original query. This can be done with the message ==withoutSelfLoop==. It is handy when we want to query a model to find external dependencies without internal ones.

@@todo We need an example of withoutSelfLoop

Another feature is to be able to change the scope of the result. This feature is covered in the next section.

!!! Scoping Queries

Depending on the analysis we perform, it might be relevant to handle queries at a different scope. For example, if we want to know associations between a given class and all the other classes of the project, whatever the type of associations. The associations be classes can only be inheritance. But two classes are also linked if a method of one of them invoked a method of the other. It is necessary to consider invocations at the scope of the class whereas they occur between some of their methods. Exactly the same occur for the other types of associations.

For this scenario, it is possible to use scope queries. A scope query can be applied to:
- A moose entity or
- A MooseQueryResult obtained through a navigation query.

A scope query has a direction to look for. You can look for entities higher, lower or both higher and lower than the receiver containment tree. 

- ==atScope:==  Return all the entities at this given famix class scope that are up in the containment of the meta-model.
- ==toScope:== Return all the entities at this given famix class scope that are down in the contain tree of the meta-model.
- ==withScope:== Return all the entities at this given famix class scope that are both up and down i containment tree of the meta-model. 

The argument of the query should be a FamixClass. It defines the scope of the query as shown below.

+A containment tree.>file://figures/modelWithContainment2.pdf|width=75|label=containment2+

For example, taking the model present in Figure *@containment2* the following queries illustrates the different possibilities. 

[[[
package2 atScope: FAMIXPackage
>>> { package1 }
]]]

[[[
package2 toScope: FAMIXPackage
>>> { }
]]]

[[[
package2 withScope: FAMIXPackage
>>> { package1 }
]]]

[[[
method1 atScope: FAMIXType
>>> { class3 }
]]]

[[[
method1 toScope: FAMIXType
>>> { class4 }
]]]


[[[
method2 withScope: FAMIXType
>>> { class3 . class4 }
]]]

!!!! Query example

Now we can express more complex queries. For example, how can we get all the external entities a class depend on at the method level. 

[[[
(aClass query: #out) withoutSelfLoop withScope: FAMIXMethod
]]]

Since ==withScope:== takes the opposites of the associations by itself, there is no need to call explicitly ==opposite==.
